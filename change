// ==================== 메이크샵 커플링 가격 자동화 시스템 v3.3 ====================
// 작성일: 2024.12.30
// 개선일: 2025.01.08
// 수정일: 2025.01.13 - 범위 지정 처리 및 가격 변동률 체크 기능 추가
// 용도: 커플링 상품의 14K/18K × 남자/여자/커플 + 10K 제품 가격 자동 매칭 및 검증

// ========== 설정 영역 ==========
const CONFIG = {
  원본데이터시트: '원본데이터',
  가격수정시트: '가격수정파일',
  매칭결과시트: '매칭결과',
  변경내역시트: '가격변경감지',
  메이크샵업로드시트: '메이크샵업로드',
  옵션검증시트: '옵션가격검증',
  미매칭원본시트: '미매칭원본상품',
  십케이데이터시트: '10k데이터',
  십케이가격수정시트: '10k가격수정파일',
  변동률검증시트: '가격변동률검증'
};

// ========== 메뉴 생성 ==========
function onOpen() {
  const ui = SpreadsheetApp.getUi();
  ui.createMenu('🔧 커플링 가격 관리')
    .addItem('📊 범위 지정 가격 검증', 'validatePricesWithRange')
    .addItem('📊 전체 가격 검증', 'validateAllPrices')
    .addItem('📊 가격 변경사항 찾기', 'findPriceChanges')
    .addItem('📥 메이크샵 업로드 파일 생성', 'createMakeshopUploadFile')
    .addItem('💹 가격 변동률 검증', 'validatePriceChangeRatio')
    .addSeparator()
    .addItem('📋 시트 정리', 'organizeSheets')
    .addItem('🗑️ 불필요한 시트 삭제', 'cleanupSheets')
    .addItem('📊 전체 리포트', 'generateFullReport')
    .addItem('🧪 테스트 데이터 생성', 'createTestData')
    .addToUi();
}

// ========== 범위 지정 가격 검증 ==========
function validatePricesWithRange() {
  const ui = SpreadsheetApp.getUi();
  
  // 범위 입력 받기
  const response = ui.prompt(
    '검증 범위 지정',
    '검증할 범위를 입력하세요.\n' +
    '예: 1-100 (1번부터 100번까지)\n' +
    '예: 101-150 (101번부터 150번까지)',
    ui.ButtonSet.OK_CANCEL
  );
  
  if (response.getSelectedButton() === ui.Button.CANCEL) {
    return;
  }
  
  const rangeInput = response.getResponseText().trim();
  const rangeMatch = rangeInput.match(/^(\d+)-(\d+)$/);
  
  if (!rangeMatch) {
    ui.alert('❌ 올바른 범위 형식이 아닙니다. 예: 1-100');
    return;
  }
  
  const startNum = parseInt(rangeMatch[1]);
  const endNum = parseInt(rangeMatch[2]);
  
  if (startNum >= endNum) {
    ui.alert('❌ 시작 번호가 끝 번호보다 작아야 합니다.');
    return;
  }
  
  // 범위를 전달하여 검증 실행
  validateAllPricesWithRange(startNum, endNum);
}

// ========== 범위 지정 가능한 전체 가격 검증 ==========
function validateAllPricesWithRange(startNum = null, endNum = null) {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const ui = SpreadsheetApp.getUi();
  
  try {
    const rangeText = startNum && endNum ? ` (${startNum}번 ~ ${endNum}번)` : ' (전체)';
    ui.alert(`가격 검증을 시작합니다${rangeText}.\n\n14K/18K 및 10K 제품을 검증합니다.`);
    
    // 14K/18K 검증 실행
    validateOptionPricesWithRange(startNum, endNum);
    
    // 10K 검증 실행
    validate10KPricesWithRange(startNum, endNum);
    
    // 가격 변동률 검증
    if (startNum && endNum) {
      validatePriceChangeRatioForRange(startNum, endNum);
    }
    
    ui.alert(`✅ 가격 검증이 완료되었습니다${rangeText}!\n\n` +
            `옵션가격검증, 10K검증결과, 가격변동률검증 시트를 확인하세요.`);
    
  } catch (error) {
    console.error('전체 검증 오류:', error);
    ui.alert('❌ 오류 발생: ' + error.toString());
  }
}

// ========== 전체 가격 검증 (기존 함수) ==========
function validateAllPrices() {
  validateAllPricesWithRange(null, null);
}

// ========== 가격 변동률 검증 ==========
function validatePriceChangeRatio() {
  const ui = SpreadsheetApp.getUi();
  
  // 범위 입력 받기
  const response = ui.prompt(
    '변동률 검증 범위',
    '검증할 범위를 입력하세요.\n' +
    '예: 1-100 (1번부터 100번까지)\n' +
    '전체 검증은 취소 후 메뉴에서 선택하세요.',
    ui.ButtonSet.OK_CANCEL
  );
  
  if (response.getSelectedButton() === ui.Button.CANCEL) {
    // 전체 검증
    validatePriceChangeRatioForRange(null, null);
    return;
  }
  
  const rangeInput = response.getResponseText().trim();
  const rangeMatch = rangeInput.match(/^(\d+)-(\d+)$/);
  
  if (!rangeMatch) {
    ui.alert('❌ 올바른 범위 형식이 아닙니다. 예: 1-100');
    return;
  }
  
  const startNum = parseInt(rangeMatch[1]);
  const endNum = parseInt(rangeMatch[2]);
  
  validatePriceChangeRatioForRange(startNum, endNum);
}

// ========== 가격 변동률 검증 (범위 지정) ==========
function validatePriceChangeRatioForRange(startNum, endNum) {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const ui = SpreadsheetApp.getUi();
  
  try {
    // 변동률 검증 시트 준비
    let 검증시트 = ss.getSheetByName(CONFIG.변동률검증시트);
    if (!검증시트) {
      검증시트 = ss.insertSheet(CONFIG.변동률검증시트);
    } else {
      검증시트.clear();
    }
    
    // 헤더 설정
    const headers = [
      '번호', '제품명', '옵션', '원본가격', '신규가격', '변동률(%)', 
      '평균변동률(%)', '차이(%)', '검증결과', '비고'
    ];
    
    검증시트.getRange(1, 1, 1, headers.length).setValues([headers]);
    검증시트.getRange(1, 1, 1, headers.length)
      .setFontWeight('bold')
      .setBackground('#ff9800')
      .setFontColor('#ffffff');
    
    // 데이터 가져오기
    const 원본시트 = ss.getSheetByName(CONFIG.원본데이터시트);
    const 가격시트 = ss.getSheetByName(CONFIG.가격수정시트);
    const 십케이가격시트 = ss.getSheetByName(CONFIG.십케이가격수정시트);
    
    const 원본데이터 = 원본시트.getDataRange().getValues();
    const 가격데이터 = 가격시트.getDataRange().getValues();
    const 가격맵 = parsePriceFile(가격데이터);
    
    const 검증결과 = [];
    const 제품별변동률 = new Map();
    
    // 14K/18K 제품 검증
    for (let i = 1; i < 원본데이터.length; i++) {
      const row = 원본데이터[i];
      const 번호 = i; // A열 번호
      const 제품명 = String(row[0] || '').trim();
      const 판매가격 = parseFloat(String(row[27] || '0').replace(/,/g, ''));
      const 옵션명문자열 = String(row[4] || '');
      const 옵션가격문자열 = String(row[5] || '');
      
      if (!제품명 || !판매가격) continue;
      
      // 범위 체크
      if (startNum && endNum && (번호 < startNum || 번호 > endNum)) continue;
      
      // 원본 옵션 가격 파싱
      const 원본옵션가격 = parseOriginalOptions(옵션명문자열, 옵션가격문자열, 판매가격);
      
      // 가격수정파일에서 매칭
      const 매칭결과 = findMatchingProduct(제품명, 가격맵);
      const 신규가격정보 = 매칭결과.가격정보;
      
      if (!신규가격정보) continue;
      
      // 각 옵션별 변동률 계산
      const 옵션목록 = ['14K커플', '14K남자', '14K여자', '18K커플', '18K남자', '18K여자'];
      const 변동률목록 = [];
      
      for (const 옵션 of 옵션목록) {
        const 원본가격 = 원본옵션가격[옵션] || 0;
        const 신규가격 = 신규가격정보[옵션] || 0;
        
        if (원본가격 > 0 && 신규가격 > 0) {
          const 변동률 = ((신규가격 - 원본가격) / 원본가격 * 100);
          변동률목록.push(변동률);
          
          if (!제품별변동률.has(제품명)) {
            제품별변동률.set(제품명, []);
          }
          제품별변동률.get(제품명).push(변동률);
        }
      }
      
      // 평균 변동률 계산
      if (변동률목록.length > 0) {
        const 평균변동률 = 변동률목록.reduce((a, b) => a + b, 0) / 변동률목록.length;
        
        // 각 옵션별로 평균과의 차이 검증
        for (let j = 0; j < 옵션목록.length; j++) {
          const 옵션 = 옵션목록[j];
          const 원본가격 = 원본옵션가격[옵션] || 0;
          const 신규가격 = 신규가격정보[옵션] || 0;
          
          if (원본가격 > 0 && 신규가격 > 0) {
            const 변동률 = ((신규가격 - 원본가격) / 원본가격 * 100);
            const 차이 = Math.abs(변동률 - 평균변동률);
            
            let 검증결과 = '정상';
            let 비고 = '';
            
            // 평균 대비 5% 이상 차이나면 경고
            if (차이 > 5) {
              검증결과 = '⚠️ 주의';
              비고 = '평균 변동률과 5% 이상 차이';
            }
            
            // 평균 대비 10% 이상 차이나면 위험
            if (차이 > 10) {
              검증결과 = '❌ 위험';
              비고 = '평균 변동률과 10% 이상 차이';
            }
            
            검증결과.push([
              번호,
              제품명,
              옵션,
              원본가격.toLocaleString(),
              신규가격.toLocaleString(),
              변동률.toFixed(2),
              평균변동률.toFixed(2),
              차이.toFixed(2),
              검증결과,
              비고
            ]);
          }
        }
      }
    }
    
    // 10K 제품도 동일하게 처리
    if (십케이가격시트) {
      const 십케이데이터 = ss.getSheetByName(CONFIG.십케이데이터시트).getDataRange().getValues();
      const 십케이가격데이터 = 십케이가격시트.getDataRange().getValues();
      const 십케이가격맵 = parse10KPriceFile(십케이가격데이터);
      
      // 10K 검증 로직 추가...
    }
    
    // 결과 출력
    if (검증결과.length > 0) {
      검증시트.getRange(2, 1, 검증결과.length, headers.length).setValues(검증결과);
      
      // 검증 결과별 색상 적용
      for (let i = 0; i < 검증결과.length; i++) {
        const 검증상태 = 검증결과[i][8];
        const rowRange = 검증시트.getRange(i + 2, 1, 1, headers.length);
        
        if (검증상태 === '정상') {
          rowRange.setBackground('#d4edda'); // 초록색
        } else if (검증상태.includes('주의')) {
          rowRange.setBackground('#fff3cd'); // 노란색
        } else if (검증상태.includes('위험')) {
          rowRange.setBackground('#f8d7da'); // 빨간색
        }
      }
    }
    
    // 요약 정보
    const 요약행 = 검증시트.getLastRow() + 2;
    const 정상건수 = 검증결과.filter(r => r[8] === '정상').length;
    const 주의건수 = 검증결과.filter(r => r[8].includes('주의')).length;
    const 위험건수 = 검증결과.filter(r => r[8].includes('위험')).length;
    
    검증시트.getRange(요약행, 1).setValue('📊 변동률 검증 요약').setFontWeight('bold');
    검증시트.getRange(요약행 + 1, 1).setValue(`✅ 정상: ${정상건수}건`);
    검증시트.getRange(요약행 + 2, 1).setValue(`⚠️ 주의: ${주의건수}건 (평균 대비 5~10% 차이)`);
    검증시트.getRange(요약행 + 3, 1).setValue(`❌ 위험: ${위험건수}건 (평균 대비 10% 이상 차이)`);
    
    const rangeText = startNum && endNum ? ` (${startNum}번 ~ ${endNum}번)` : '';
    ui.alert(`✅ 가격 변동률 검증 완료${rangeText}!\n\n` +
            `정상: ${정상건수}건\n` +
            `주의: ${주의건수}건\n` +
            `위험: ${위험건수}건`);
    
  } catch (error) {
    console.error('변동률 검증 오류:', error);
    ui.alert('❌ 오류 발생: ' + error.toString());
  }
}

// ========== 10K 가격 검증 (범위 지정 가능) ==========
function validate10KPricesWithRange(startNum, endNum) {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const ui = SpreadsheetApp.getUi();
  
  try {
    // 시트 가져오기
    const 십케이시트 = ss.getSheetByName(CONFIG.십케이데이터시트);
    const 십케이가격시트 = ss.getSheetByName(CONFIG.십케이가격수정시트);
    
    if (!십케이시트 || !십케이가격시트) {
      console.log('10K 시트가 없어 검증을 건너뜁니다.');
      return;
    }
    
    // 데이터 가져오기
    const 십케이데이터 = 십케이시트.getDataRange().getValues();
    const 십케이가격데이터 = 십케이가격시트.getDataRange().getValues();
    
    // 10K 검증 결과 시트 준비
    let 검증시트 = ss.getSheetByName('10K검증결과');
    if (!검증시트) {
      검증시트 = ss.insertSheet('10K검증결과');
    } else {
      검증시트.clear();
    }
    
    // 검증 시트 헤더
    const headers = [
      '번호', '제품명', '옵션타입', '매칭상태',
      '원본_10K커플', '가격파일_10K커플', '10K커플_검증',
      '원본_10K남자', '가격파일_10K남자', '10K남자_검증',
      '원본_10K여자', '가격파일_10K여자', '10K여자_검증',
      '전체검증결과', '비고'
    ];
    
    검증시트.getRange(1, 1, 1, headers.length).setValues([headers]);
    검증시트.getRange(1, 1, 1, headers.length)
      .setFontWeight('bold')
      .setBackground('#FFD700')  // 금색 (10K)
      .setFontColor('#000000');
    
    // 10K 가격수정파일 파싱 (범위 필터링 추가)
    const 십케이가격맵 = parse10KPriceFileWithRange(십케이가격데이터, startNum, endNum);
    
    // 10K 데이터 검증
    const 검증결과 = [];
    let 전체상품수 = 0;
    let 일치상품수 = 0;
    let 불일치상품수 = 0;
    let 미매칭상품수 = 0;
    
    const 허용오차 = 10000;
    
    // 범위에 해당하는 제품명 목록 추출
    const 대상제품명목록 = new Set();
    for (let i = 1; i < 십케이가격데이터.length; i += 3) {
      const 행번호 = Math.floor((i - 1) / 3) + 1; // 3행이 1개 제품이므로
      if (startNum && endNum && (행번호 < startNum || 행번호 > endNum)) continue;
      
      const 제품명 = String(십케이가격데이터[i][5] || '').trim();
      if (제품명) {
        대상제품명목록.add(제품명);
        // 10k 제거한 버전도 추가
        if (제품명.toLowerCase().startsWith('10k')) {
          대상제품명목록.add(제품명.substring(3).trim());
        }
      }
    }
    
    for (let i = 1; i < 십케이데이터.length; i++) {
      const row = 십케이데이터[i];
      const 제품명 = String(row[0] || '').trim(); // A열
      
      // 범위에 해당하는 제품만 처리
      if (startNum && endNum) {
        let 매칭됨 = false;
        // 다양한 형태로 매칭 확인
        if (대상제품명목록.has(제품명)) {
          매칭됨 = true;
        } else if (제품명.toLowerCase().startsWith('10k')) {
          const 제품명_10k제거 = 제품명.substring(3).trim();
          if (대상제품명목록.has(제품명_10k제거)) {
            매칭됨 = true;
          }
        }
        
        if (!매칭됨) continue;
      }
      
      const 옵션명문자열 = String(row[44] || ''); // AS열 (10K 옵션명)
      const 가격차이문자열 = String(row[45] || ''); // AT열 (10K 차이값)
      const 판매가격 = parseFloat(String(row[27] || '0').replace(/,/g, '')); // AB열
      
      if (!제품명) continue;
      
      전체상품수++;
      
      // 옵션 타입 결정
      const 안쪽막음포함 = 옵션명문자열.includes('[안쪽막음]');
      const 옵션타입 = 안쪽막음포함 ? '안쪽막음포함' : '일반';
      
      // 10K 옵션 가격 파싱
      const 원본옵션가격 = parse10KOptions(옵션명문자열, 가격차이문자열, 판매가격);
      
      // 가격수정파일에서 매칭
      let 가격파일정보 = 십케이가격맵.get(제품명);
      
      // 다양한 형태로 매칭 시도
      if (!가격파일정보) {
        if (제품명.toLowerCase().startsWith('10k ')) {
          const 제품명_10k제거 = 제품명.substring(4).trim();
          가격파일정보 = 십케이가격맵.get(제품명_10k제거);
        } else if (제품명.toLowerCase().startsWith('10k')) {
          const 제품명_10k제거 = 제품명.substring(3).trim();
          가격파일정보 = 십케이가격맵.get(제품명_10k제거);
        }
      }
      
      // 번호 찾기
      let 번호 = 0;
      for (const [key, value] of 십케이가격맵) {
        if (value === 가격파일정보) {
          번호 = value._rowNumber || 0;
          break;
        }
      }
      
      if (!가격파일정보) {
        검증결과.push([
          번호 || '?',
          제품명, 옵션타입, '❌ 미매칭',
          원본옵션가격['10K커플'] || '', '', '❌',
          원본옵션가격['10K남자'] || '', '', '❌',
          원본옵션가격['10K여자'] || '', '', '❌',
          '❌ 미매칭', '10K가격수정파일에 없음'
        ]);
        미매칭상품수++;
        continue;
      }
      
      // 각 옵션별 검증
      let 모두일치 = true;
      const 검증행 = [번호, 제품명, 옵션타입, ''];
      let 검증상세 = [];
      
      const 옵션순서 = ['10K커플', '10K남자', '10K여자'];
      
      for (const 옵션 of 옵션순서) {
        const 원본가격 = 원본옵션가격[옵션] || 0;
        const 가격파일가격 = 가격파일정보[옵션] || 0;
        const 차이 = Math.abs(원본가격 - 가격파일가격);
        const 일치 = 차이 <= 허용오차;
        
        let 검증메시지 = '';
        if (차이 === 0) {
          검증메시지 = '✅';
        } else if (일치) {
          검증메시지 = `✅ (차이: ${차이.toLocaleString()}원)`;
        } else {
          검증메시지 = `❌ (차이: ${차이.toLocaleString()}원)`;
          모두일치 = false;
          검증상세.push(`${옵션}: ${차이.toLocaleString()}원 차이`);
        }
        
        검증행.push(원본가격);
        검증행.push(가격파일가격);
        검증행.push(검증메시지);
      }
      
      검증행[3] = 모두일치 ? '✅ 일치' : '⚠️ 불일치';
      검증행.push(모두일치 ? '✅ 전체일치' : '❌ 불일치');
      검증행.push(검증상세.join(', ') || '');
      
      검증결과.push(검증행);
      
      if (모두일치) {
        일치상품수++;
      } else {
        불일치상품수++;
      }
    }
    
    // 결과 출력
    if (검증결과.length > 0) {
      검증시트.getRange(2, 1, 검증결과.length, headers.length).setValues(검증결과);
      
      // 상태별 색상 적용
      for (let i = 0; i < 검증결과.length; i++) {
        const 상태 = 검증결과[i][3];
        const rowRange = 검증시트.getRange(i + 2, 1, 1, headers.length);
        
        if (상태 === '✅ 일치') {
          rowRange.setBackground('#d4edda'); // 초록색
        } else if (상태 === '⚠️ 불일치') {
          rowRange.setBackground('#fff3cd'); // 노란색
        } else if (상태 === '❌ 미매칭') {
          rowRange.setBackground('#f8d7da'); // 빨간색
        }
      }
    }
    
    // 요약 정보
    const 요약행 = 검증시트.getLastRow() + 2;
    const rangeText = startNum && endNum ? ` (${startNum}번 ~ ${endNum}번)` : '';
    검증시트.getRange(요약행, 1).setValue(`📊 10K 검증 요약${rangeText}`).setFontWeight('bold');
    검증시트.getRange(요약행 + 1, 1).setValue(`✅ 전체 상품: ${전체상품수}개`);
    검증시트.getRange(요약행 + 2, 1).setValue(`✅ 일치: ${일치상품수}개`);
    검증시트.getRange(요약행 + 3, 1).setValue(`⚠️ 불일치: ${불일치상품수}개`);
    검증시트.getRange(요약행 + 4, 1).setValue(`❌ 미매칭: ${미매칭상품수}개`);
    
  } catch (error) {
    console.error('10K 검증 오류:', error);
    ui.alert('❌ 10K 검증 오류 발생: ' + error.toString());
  }
}

// ========== 10K 가격수정파일 파싱 (범위 지정) ==========
function parse10KPriceFileWithRange(가격데이터, startNum, endNum) {
  const 가격맵 = new Map();
  
  // 3행씩 처리 (남자단품, 여자단품, 커플 순서)
  for (let i = 1; i < 가격데이터.length; i += 3) {
    const 행번호 = Math.floor((i - 1) / 3) + 1; // 3행이 1개 제품이므로
    
    // 범위 체크
    if (startNum && endNum && (행번호 < startNum || 행번호 > endNum)) continue;
    
    const 제품명원본 = String(가격데이터[i][5] || '').trim(); // F열
    
    if (!제품명원본) continue;
    
    const 남자행 = i;
    const 여자행 = i + 1;
    const 커플행 = i + 2;
    
    if (여자행 >= 가격데이터.length || 커플행 >= 가격데이터.length) continue;
    
    const 가격정보 = {
      // 일반 10K 가격 (O열: 30% 할인된 실제가격)
      '10K남자': parseFloat(String(가격데이터[남자행][14] || '0').replace(/,/g, '')) || 0,
      '10K여자': parseFloat(String(가격데이터[여자행][14] || '0').replace(/,/g, '')) || 0,
      '10K커플': parseFloat(String(가격데이터[커플행][14] || '0').replace(/,/g, '')) || 0,
      '_rowNumber': 행번호 // 번호 저장
    };
    
    // 안쪽막음 가격이 있는 경우 (AC열)
    const 안쪽막음남자 = parseFloat(String(가격데이터[남자행][28] || '0').replace(/,/g, ''));
    const 안쪽막음여자 = parseFloat(String(가격데이터[여자행][28] || '0').replace(/,/g, ''));
    const 안쪽막음커플 = parseFloat(String(가격데이터[커플행][28] || '0').replace(/,/g, ''));
    
    if (안쪽막음커플 > 0) {
      가격정보['10K남자_안쪽막음'] = 안쪽막음남자;
      가격정보['10K여자_안쪽막음'] = 안쪽막음여자;
      가격정보['10K커플_안쪽막음'] = 안쪽막음커플;
    }
    
    // 제품명을 여러 형태로 저장
    가격맵.set(제품명원본, 가격정보);
    
    // "10k" 제거한 버전도 저장
    if (제품명원본.toLowerCase().startsWith('10k')) {
      const 제품명_10k제거 = 제품명원본.substring(3).trim();
      가격맵.set(제품명_10k제거, 가격정보);
    }
    
    // "10k" 추가한 버전도 저장
    if (!제품명원본.toLowerCase().startsWith('10k')) {
      가격맵.set('10k' + 제품명원본, 가격정보);
    }
  }
  
  return 가격맵;
}

// ========== 10K 가격수정파일 파싱 (기존) ==========
function parse10KPriceFile(가격데이터) {
  return parse10KPriceFileWithRange(가격데이터, null, null);
}

// ========== 10K 옵션 가격 파싱 ==========
function parse10KOptions(옵션명문자열, 가격차이문자열, 판매가격) {
  const 옵션가격 = {};
  
  // E열과 F열 파싱
  const 옵션명들 = 옵션명문자열.split(',').map(s => s.trim());
  const 가격차이들 = 가격차이문자열.split(',').map(s => {
    const num = parseFloat(s.replace(/,/g, '').trim());
    return isNaN(num) ? 0 : num;
  });
  
  // 판매가격(AB열)은 정가!! 30% 할인을 적용해야 함
  for (let i = 0; i < 옵션명들.length && i < 가격차이들.length; i++) {
    const 옵션명 = 옵션명들[i];
    const 차이값 = 가격차이들[i];
    
    // 1. 판매가격(정가) + F열 차이값 = 각 옵션의 정상가
    const 정상가 = 판매가격 + 차이값;
    // 2. 정상가 × 0.7 = 실제 판매가 (30% 할인)
    const 실제판매가 = 정상가 * 0.7;
    // 3. 천원단위 올림
    const 최종가격 = Math.ceil(실제판매가 / 1000) * 1000;
    
    if (옵션명.includes('커플링') && !옵션명.includes('안쪽막음')) {
      옵션가격['10K커플'] = 최종가격;
    } else if (옵션명.includes('남자단품') && !옵션명.includes('안쪽막음')) {
      옵션가격['10K남자'] = 최종가격;
    } else if (옵션명.includes('여자단품') && !옵션명.includes('안쪽막음')) {
      옵션가격['10K여자'] = 최종가격;
    } else if (옵션명.includes('커플링') && 옵션명.includes('안쪽막음')) {
      옵션가격['10K커플_안쪽막음'] = 최종가격;
    } else if (옵션명.includes('남자단품') && 옵션명.includes('안쪽막음')) {
      옵션가격['10K남자_안쪽막음'] = 최종가격;
    } else if (옵션명.includes('여자단품') && 옵션명.includes('안쪽막음')) {
      옵션가격['10K여자_안쪽막음'] = 최종가격;
    }
  }
  
  return 옵션가격;
}

// ========== 옵션 가격 검증 (14K/18K - 범위 지정 가능) ==========
function validateOptionPricesWithRange(startNum, endNum) {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const ui = SpreadsheetApp.getUi();
  
  try {
    // 시트 가져오기
    const 원본시트 = ss.getSheetByName(CONFIG.원본데이터시트);
    const 가격시트 = ss.getSheetByName(CONFIG.가격수정시트);
    
    if (!원본시트 || !가격시트) {
      ui.alert('❌ 원본데이터 또는 가격수정파일 시트를 찾을 수 없습니다.');
      return;
    }
    
    // 10K 제품명 목록 가져오기
    const 십케이제품명목록 = new Set();
    const 십케이시트 = ss.getSheetByName(CONFIG.십케이데이터시트);
    if (십케이시트) {
      const 십케이데이터 = 십케이시트.getDataRange().getValues();
      for (let i = 1; i < 십케이데이터.length; i++) {
        const 제품명 = String(십케이데이터[i][0] || '').trim();
        if (제품명) {
          십케이제품명목록.add(제품명);
          if (제품명.toLowerCase().startsWith('10k')) {
            십케이제품명목록.add(제품명.substring(3).trim());
          }
        }
      }
    }
    
    // 데이터 가져오기
    const 원본데이터 = 원본시트.getDataRange().getValues();
    const 가격데이터 = 가격시트.getDataRange().getValues();
    
    // 검증 결과 시트 준비
    let 검증시트 = ss.getSheetByName(CONFIG.옵션검증시트);
    if (!검증시트) {
      검증시트 = ss.insertSheet(CONFIG.옵션검증시트);
    } else {
      검증시트.clear();
    }
    
    // 미매칭 원본상품 시트 준비
    let 미매칭시트 = ss.getSheetByName(CONFIG.미매칭원본시트);
    if (!미매칭시트) {
      미매칭시트 = ss.insertSheet(CONFIG.미매칭원본시트);
    } else {
      미매칭시트.clear();
    }
    
    // 검증 시트 헤더
    const headers = [
      '번호', '제품명', '매칭상태', '할인율',
      '원본_14K커플', '가격파일_14K커플', '14K커플_검증',
      '원본_14K남자', '가격파일_14K남자', '14K남자_검증',
      '원본_14K여자', '가격파일_14K여자', '14K여자_검증',
      '원본_18K커플', '가격파일_18K커플', '18K커플_검증',
      '원본_18K남자', '가격파일_18K남자', '18K남자_검증',
      '원본_18K여자', '가격파일_18K여자', '18K여자_검증',
      '전체검증결과', '비고'
    ];
    
    검증시트.getRange(1, 1, 1, headers.length).setValues([headers]);
    검증시트.getRange(1, 1, 1, headers.length)
      .setFontWeight('bold')
      .setBackground('#4285f4')
      .setFontColor('#ffffff');
    
    // 미매칭 시트 헤더
    const 미매칭헤더 = [
      '번호', '상품코드', '제품명', '판매가격', '옵션명', '옵션가격차이', 
      '14K커플가격', '14K남자가격', '14K여자가격',
      '18K커플가격', '18K남자가격', '18K여자가격',
      '유사제품힌트'
    ];
    
    미매칭시트.getRange(1, 1, 1, 미매칭헤더.length).setValues([미매칭헤더]);
    미매칭시트.getRange(1, 1, 1, 미매칭헤더.length)
      .setFontWeight('bold')
      .setBackground('#ff6b6b')
      .setFontColor('#ffffff');
    
    // 가격수정파일 파싱 (범위 필터링 추가)
    const 가격맵 = parsePriceFileWithRange(가격데이터, startNum, endNum);
    
    // 원본데이터 파싱 및 검증
    const 검증결과 = [];
    const 미매칭원본 = [];
    let 전체상품수 = 0;
    let 일치상품수 = 0;
    let 불일치상품수 = 0;
    let 미매칭상품수 = 0;
    let 할인율10_상품수 = 0;
    let 할인율30_상품수 = 0;
    let 할인율혼합_상품수 = 0;
    
    const 허용오차 = 10000;
    
    // 범위에 해당하는 제품명 목록 추출
    const 대상제품명목록 = new Set();
    for (let i = 1; i < 가격데이터.length; i += 3) {
      const 행번호 = Math.floor((i - 1) / 3) + 1;
      if (startNum && endNum && (행번호 < startNum || 행번호 > endNum)) continue;
      
      const 제품명 = String(가격데이터[i][5] || '').trim();
      if (제품명) {
        대상제품명목록.add(제품명);
      }
    }
    
    for (let i = 1; i < 원본데이터.length; i++) {
      const row = 원본데이터[i];
      const 상품코드 = String(row[1] || '').trim(); // B열
      const 제품명 = String(row[0] || '').trim(); // A열
      const 판매가격 = parseFloat(String(row[27] || '0').replace(/,/g, '')); // AB열
      const 옵션명문자열 = String(row[4] || ''); // E열
      const 옵션가격문자열 = String(row[5] || ''); // F열
      
      if (!제품명 || !판매가격) continue;
      
      // 10K 제품은 제외
      if (십케이제품명목록.has(제품명)) {
        console.log(`10K 제품 제외: ${제품명}`);
        continue;
      }
      
      // 원본 옵션 가격 파싱
      const 원본옵션가격 = parseOriginalOptions(옵션명문자열, 옵션가격문자열, 판매가격);
      
      // 가격수정파일에서 매칭되는 제품 찾기
      const 매칭결과 = findMatchingProduct(제품명, 가격맵);
      const 가격파일정보 = 매칭결과.가격정보;
      const 매칭된키 = 매칭결과.매칭키;
      
      // 번호 찾기
      const 번호 = 가격파일정보 ? (가격파일정보._rowNumber || 0) : 0;
      
      // 범위에 해당하는 제품만 처리
      if (startNum && endNum) {
        if (!가격파일정보) {
          // 미매칭이면 건너뛰기
          continue;
        }
        // 대상 제품이 아니면 건너뛰기
        if (!대상제품명목록.has(매칭된키)) {
          continue;
        }
      }
      
      전체상품수++;
      
      if (!가격파일정보) {
        // 매칭되는 제품이 없음
        const 유사제품들 = [];
        const 제품명첫글자 = 제품명.substring(0, 2);
        
        for (const key of 가격맵.keys()) {
          if (key.includes(제품명첫글자)) {
            유사제품들.push(key);
            if (유사제품들.length >= 3) break;
          }
        }
        
        const 유사제품힌트 = 유사제품들.length > 0 
          ? `유사: ${유사제품들.join(', ')}` 
          : '가격수정파일에 유사한 제품 없음';
        
        미매칭원본.push([
          번호 || '?',
          상품코드,
          제품명,
          판매가격,
          옵션명문자열,
          옵션가격문자열,
          원본옵션가격['14K커플'] || '',
          원본옵션가격['14K남자'] || '',
          원본옵션가격['14K여자'] || '',
          원본옵션가격['18K커플'] || '',
          원본옵션가격['18K남자'] || '',
          원본옵션가격['18K여자'] || '',
          유사제품힌트
        ]);
        
        검증결과.push([
          번호 || '?',
          제품명, '❌ 미매칭', '', // 할인율 열
          원본옵션가격['14K커플'] || '', '', '❌',
          원본옵션가격['14K남자'] || '', '', '❌',
          원본옵션가격['14K여자'] || '', '', '❌',
          원본옵션가격['18K커플'] || '', '', '❌',
          원본옵션가격['18K남자'] || '', '', '❌',
          원본옵션가격['18K여자'] || '', '', '❌',
          '❌ 미매칭', 유사제품힌트
        ]);
        미매칭상품수++;
        continue;
      }
      
      // 각 옵션별 검증
      let 모두일치 = true;
      const 검증행 = [번호, 제품명, '', '']; // 번호, 할인율 열 추가
      let 검증상세 = [];
      let 상품할인율 = null;
      
      const 옵션순서 = ['14K커플', '14K남자', '14K여자', '18K커플', '18K남자', '18K여자'];
      
      for (const 옵션 of 옵션순서) {
        const 원본가격_30 = 원본옵션가격[옵션] || 0;
        const 원본가격_10 = 원본옵션가격[옵션 + '_10%'] || 0;
        const 가격파일가격 = 가격파일정보[옵션] || 0;
        
        // 30% 할인과 10% 할인 중 어느 것이 더 가까운지 확인
        const 차이_30 = Math.abs(원본가격_30 - 가격파일가격);
        const 차이_10 = Math.abs(원본가격_10 - 가격파일가격);
        
        let 원본가격, 차이, 할인율;
        
        if (차이_30 <= 차이_10) {
          원본가격 = 원본가격_30;
          차이 = 차이_30;
          할인율 = '30%';
        } else {
          원본가격 = 원본가격_10;
          차이 = 차이_10;
          할인율 = '10%';
        }
        
        // 첫 번째 옵션(14K커플)의 할인율을 상품 대표 할인율로 설정
        if (옵션 === '14K커플' && 차이 <= 허용오차) {
          상품할인율 = 할인율;
        }
        
        const 일치 = 차이 <= 허용오차;
        
        let 검증상태 = '';
        let 검증메시지 = '';
        
        if (차이 === 0) {
          검증상태 = '일치';
          검증메시지 = `✅ (${할인율})`;
        } else if (일치) {
          검증상태 = '일치';
          검증메시지 = `✅ (${할인율}, 차이: ${차이.toLocaleString()}원)`;
        } else {
          검증상태 = '불일치';
          검증메시지 = `❌ (차이: ${차이.toLocaleString()}원)`;
          // 불일치인 경우 두 할인율 모두의 계산값 표시
          const 추가정보 = `[30%: ${원본가격_30.toLocaleString()}, 10%: ${원본가격_10.toLocaleString()}]`;
          검증메시지 += ` ${추가정보}`;
        }
        
        검증행.push(원본가격);
        검증행.push(가격파일가격);
        검증행.push(검증메시지);
        
        if (검증상태 === '불일치') {
          모두일치 = false;
          검증상세.push(`${옵션}: ${차이.toLocaleString()}원 차이`);
        }
      }
      
      검증행[2] = 모두일치 ? '✅ 일치' : '⚠️ 불일치';
      검증행[3] = 상품할인율 || '혼합'; // 할인율 표시
      검증행.push(모두일치 ? '✅ 전체일치' : '❌ 불일치');
      
      // 비고란에 매칭 정보 추가
      let 비고 = 검증상세.join(', ') || '';
      
      // 매칭 정보 추가
      if (매칭된키 !== 제품명) {
        비고 = `[매칭: ${매칭된키}] ${비고}`;
      }
      
      검증행.push(비고);
      
      검증결과.push(검증행);
      
      if (모두일치) {
        일치상품수++;
        // 할인율 통계
        if (상품할인율 === '10%') {
          할인율10_상품수++;
        } else if (상품할인율 === '30%') {
          할인율30_상품수++;
        } else {
          할인율혼합_상품수++;
        }
      } else {
        불일치상품수++;
      }
    }
    
    // 결과 출력
    if (검증결과.length > 0) {
      검증시트.getRange(2, 1, 검증결과.length, headers.length).setValues(검증결과);
      
      // 상태별 색상 적용
      for (let i = 0; i < 검증결과.length; i++) {
        const 상태 = 검증결과[i][2];
        const rowRange = 검증시트.getRange(i + 2, 1, 1, headers.length);
        
        if (상태 === '✅ 일치') {
          rowRange.setBackground('#d4edda'); // 초록색
        } else if (상태 === '⚠️ 불일치') {
          rowRange.setBackground('#fff3cd'); // 노란색
        } else if (상태 === '❌ 미매칭') {
          rowRange.setBackground('#f8d7da'); // 빨간색
        }
      }
    }
    
    // 미매칭 원본상품 출력
    if (미매칭원본.length > 0) {
      미매칭시트.getRange(2, 1, 미매칭원본.length, 미매칭헤더.length).setValues(미매칭원본);
      미매칭시트.getRange(2, 1, 미매칭원본.length, 미매칭헤더.length).setBackground('#ffe6e6');
    }
    
    // 요약 정보
    const 요약행 = 검증시트.getLastRow() + 2;
    const rangeText = startNum && endNum ? ` (${startNum}번 ~ ${endNum}번)` : '';
    검증시트.getRange(요약행, 1).setValue(`📊 검증 요약${rangeText}`).setFontWeight('bold');
    검증시트.getRange(요약행 + 1, 1).setValue(`✅ 전체 상품: ${전체상품수}개`);
    검증시트.getRange(요약행 + 2, 1).setValue(`✅ 일치: ${일치상품수}개`);
    검증시트.getRange(요약행 + 3, 1).setValue(`⚠️ 불일치: ${불일치상품수}개`);
    검증시트.getRange(요약행 + 4, 1).setValue(`❌ 미매칭: ${미매칭상품수}개`);
    검증시트.getRange(요약행 + 5, 1).setValue(`ℹ️ 허용오차: ${허용오차.toLocaleString()}원`);
    검증시트.getRange(요약행 + 6, 1).setValue(`ℹ️ 할인율: 30% 또는 10% 자동 감지`);
    
    // 할인율 통계
    if (일치상품수 > 0) {
      검증시트.getRange(요약행 + 7, 1).setValue('📊 할인율 통계').setFontWeight('bold');
      검증시트.getRange(요약행 + 8, 1).setValue(`- 30% 할인: ${할인율30_상품수}개`);
      검증시트.getRange(요약행 + 9, 1).setValue(`- 10% 할인: ${할인율10_상품수}개`);
      if (할인율혼합_상품수 > 0) {
        검증시트.getRange(요약행 + 10, 1).setValue(`- 혼합: ${할인율혼합_상품수}개`);
      }
    }
    
    const message = `✅ 옵션 가격 검증 완료${rangeText}!\n\n` +
                   `전체 상품: ${전체상품수}개\n` +
                   `일치: ${일치상품수}개\n` +
                   `불일치: ${불일치상품수}개\n` +
                   `미매칭: ${미매칭상품수}개\n\n` +
                   `할인율 통계:\n` +
                   `- 30% 할인: ${할인율30_상품수}개\n` +
                   `- 10% 할인: ${할인율10_상품수}개\n` +
                   (할인율혼합_상품수 > 0 ? `- 혼합: ${할인율혼합_상품수}개\n` : '') +
                   `\n※ ${허용오차.toLocaleString()}원 이내 차이는 일치로 처리됩니다.\n` +
                   `※ 30% 또는 10% 할인율을 자동으로 감지합니다.`;
    
    ui.alert(message);
    
  } catch (error) {
    console.error('오류:', error);
    ui.alert('❌ 오류 발생: ' + error.toString());
  }
}

// ========== 제품명 유연한 매칭 함수 ==========
function findMatchingProduct(제품명, 가격맵) {
  // 정확히 일치하는 경우
  let 가격정보 = 가격맵.get(제품명);
  if (가격정보) {
    return { 가격정보: 가격정보, 매칭키: 제품명 };
  }
  
  // 특수문자와 공백을 표준화하여 비교
  const 표준화함수 = (text) => {
    return text
      .replace(/[\[\]()]/g, '') // 대괄호, 소괄호 제거
      .replace(/\s+/g, ' ')      // 다중 공백을 단일 공백으로
      .trim();                   // 앞뒤 공백 제거
  };
  
  const 표준화제품명 = 표준화함수(제품명);
  
  // 가장 정확한 매칭을 찾기 위한 점수 시스템
  let 최고점수 = 0;
  let 최적매칭 = null;
  
  for (const [key, value] of 가격맵) {
    const 표준화키 = 표준화함수(key);
    
    // 1. 표준화된 이름이 완전히 일치하는 경우 (최우선)
    if (표준화제품명 === 표준화키) {
      console.log(`표준화 매칭 성공: "${제품명}" → "${key}"`);
      return { 가격정보: value, 매칭키: key };
    }
    
    // 2. 부분 매칭 점수 계산
    let 점수 = 0;
    
    // 한쪽이 다른 쪽을 포함하는 경우
    if (표준화제품명.includes(표준화키)) {
      점수 = 표준화키.length / 표준화제품명.length * 100;
    } else if (표준화키.includes(표준화제품명)) {
      점수 = 표준화제품명.length / 표준화키.length * 100;
    }
    
    // 최고 점수 업데이트
    if (점수 > 최고점수 && 점수 > 70) { // 70% 이상 일치해야 매칭
      최고점수 = 점수;
      최적매칭 = { key: key, value: value };
    }
  }
  
  // 최적 매칭이 있으면 반환
  if (최적매칭) {
    console.log(`유연한 매칭 성공 (${Math.round(최고점수)}%): "${제품명}" → "${최적매칭.key}"`);
    return { 가격정보: 최적매칭.value, 매칭키: 최적매칭.key };
  }
  
  // 매칭 실패
  return { 가격정보: null, 매칭키: null };
}

// ========== 가격수정파일 파싱 (3행 병합 구조 - 범위 지정) ==========
function parsePriceFileWithRange(가격데이터, startNum, endNum) {
  const 가격맵 = new Map();
  let 파싱된제품수 = 0;
  
  // 헤더 행 건너뛰고 시작
  for (let i = 1; i < 가격데이터.length; i += 3) {
    const 행번호 = Math.floor((i - 1) / 3) + 1; // 3행이 1개 제품
    
    // 범위 체크
    if (startNum && endNum && (행번호 < startNum || 행번호 > endNum)) continue;
    
    const 제품명 = String(가격데이터[i][5] || '').trim(); // F열
    
    if (!제품명) continue;
    
    // 3행이 하나의 제품 (남자단품, 여자단품, 커플 순서)
    const 남자행 = i;
    const 여자행 = i + 1;
    const 커플행 = i + 2;
    
    // 경계 체크
    if (여자행 >= 가격데이터.length || 커플행 >= 가격데이터.length) continue;
    
    const 가격정보 = {
      // 14K 가격 (O열: 쿠폰가 = 실제 판매가)
      '14K남자': parseFloat(String(가격데이터[남자행][14] || '0').replace(/,/g, '')) || 0,
      '14K여자': parseFloat(String(가격데이터[여자행][14] || '0').replace(/,/g, '')) || 0,
      '14K커플': parseFloat(String(가격데이터[커플행][14] || '0').replace(/,/g, '')) || 0,
      
      // 18K 가격 (AC열: 쿠폰가 = 실제 판매가)
      '18K남자': parseFloat(String(가격데이터[남자행][28] || '0').replace(/,/g, '')) || 0,
      '18K여자': parseFloat(String(가격데이터[여자행][28] || '0').replace(/,/g, '')) || 0,
      '18K커플': parseFloat(String(가격데이터[커플행][28] || '0').replace(/,/g, '')) || 0,
      
      '_rowNumber': 행번호 // 번호 저장
    };
    
    가격맵.set(제품명, 가격정보);
    파싱된제품수++;
  }
  
  console.log(`가격수정파일에서 ${파싱된제품수}개 제품 파싱 완료`);
  return 가격맵;
}

// ========== 가격수정파일 파싱 (기존) ==========
function parsePriceFile(가격데이터) {
  return parsePriceFileWithRange(가격데이터, null, null);
}

// ========== 원본 옵션 가격 파싱 ==========
function parseOriginalOptions(옵션명문자열, 옵션가격문자열, 판매가격) {
  const 옵션가격 = {};
  
  // E열과 F열 파싱
  const 옵션명들 = 옵션명문자열.split(',').map(s => s.trim());
  const 가격차이들 = 옵션가격문자열.split(',').map(s => {
    const num = parseFloat(s.replace(/,/g, '').trim());
    return isNaN(num) ? 0 : num;
  });
  
  // 옵션 순서: 14K커플링, 14K남자단품, 14K여자단품, 18K커플링, 18K남자단품, 18K여자단품
  const 옵션매핑 = {
    0: '14K커플',
    1: '14K남자',
    2: '14K여자',
    3: '18K커플',
    4: '18K남자',
    5: '18K여자'
  };
  
  // 판매가격(AB열)은 정가!! 30% 할인과 10% 할인 모두 계산
  for (let i = 0; i < 가격차이들.length && i < 6; i++) {
    const 옵션키 = 옵션매핑[i];
    if (옵션키) {
      // 1. 판매가격(정가) + F열 차이값 = 각 옵션의 정상가
      const 정상가 = 판매가격 + 가격차이들[i];
      
      // 2. 30% 할인과 10% 할인 모두 계산
      const 실제판매가_30 = 정상가 * 0.7;
      const 실제판매가_10 = 정상가 * 0.9;
      
      // 3. 천원단위 올림
      옵션가격[옵션키] = Math.ceil(실제판매가_30 / 1000) * 1000;  // 30% 할인 기본값
      옵션가격[옵션키 + '_10%'] = Math.ceil(실제판매가_10 / 1000) * 1000;  // 10% 할인 버전
      옵션가격[옵션키 + '_정상가'] = 정상가;
    }
  }
  
  return 옵션가격;
}

// ========== 가격 변경사항 찾기 (수정: 범위 지정된 제품만) ==========
function findPriceChanges() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const ui = SpreadsheetApp.getUi();
  
  try {
    // 먼저 전체 검증 실행하지 않고, 기존 검증 결과에서 불일치 항목만 추출
    const 검증시트 = ss.getSheetByName(CONFIG.옵션검증시트);
    const 십케이검증시트 = ss.getSheetByName('10K검증결과');
    
    if (!검증시트) {
      ui.alert('❌ 검증 결과가 없습니다. 먼저 가격 검증을 실행하세요.');
      return;
    }
    
    // 변경내역 시트 생성
    let 변경시트 = ss.getSheetByName(CONFIG.변경내역시트);
    if (!변경시트) {
      변경시트 = ss.insertSheet(CONFIG.변경내역시트);
    } else {
      변경시트.clear();
    }
    
    // 헤더
    const headers = [
      '번호', '제품명', '옵션', '원본가격', '신규가격', '가격차이', '변경타입', 
      '30%할인가', '제품타입'
    ];
    
    변경시트.getRange(1, 1, 1, headers.length).setValues([headers]);
    변경시트.getRange(1, 1, 1, headers.length)
      .setFontWeight('bold')
      .setBackground('#f0ad4e')
      .setFontColor('#ffffff');
    
    const 변경내역 = [];
    
    // 14K/18K 불일치 항목 추출
    const 검증데이터 = 검증시트.getDataRange().getValues();
    
    for (let i = 1; i < 검증데이터.length; i++) {
      const row = 검증데이터[i];
      if (row[2] === '⚠️ 불일치') {
        const 번호 = row[0];
        const 제품명 = row[1];
        
        // 각 옵션별로 변경사항 확인
        const 옵션정보 = [
          { name: '14K커플', 원본: row[4], 신규: row[5], 검증: row[6] },
          { name: '14K남자', 원본: row[7], 신규: row[8], 검증: row[9] },
          { name: '14K여자', 원본: row[10], 신규: row[11], 검증: row[12] },
          { name: '18K커플', 원본: row[13], 신규: row[14], 검증: row[15] },
          { name: '18K남자', 원본: row[16], 신규: row[17], 검증: row[18] },
          { name: '18K여자', 원본: row[19], 신규: row[20], 검증: row[21] }
        ];
        
        for (const 옵션 of 옵션정보) {
          // 검증 결과가 ❌로 시작하는 경우만 (10000원 초과 차이)
          if (옵션.검증.toString().startsWith('❌') && 옵션.원본 && 옵션.신규) {
            const 차이 = 옵션.신규 - 옵션.원본;
            const 할인가 = Math.round(옵션.신규 * 0.7);
            const 변경타입 = 차이 > 0 ? '📈 인상' : '📉 인하';
            
            // 가격차이를 더 읽기 쉽게 표시
            const 가격차이표시 = 차이 > 0 
              ? `+${차이.toLocaleString()}원` 
              : `${차이.toLocaleString()}원`;
            
            변경내역.push([
              번호,
              제품명,
              옵션.name,
              옵션.원본.toLocaleString() + '원',
              옵션.신규.toLocaleString() + '원',
              가격차이표시,
              변경타입,
              할인가.toLocaleString() + '원',
              '14K/18K'
            ]);
          }
        }
      }
    }
    
    // 10K 불일치 항목 추출
    if (십케이검증시트) {
      const 십케이데이터 = 십케이검증시트.getDataRange().getValues();
      
      for (let i = 1; i < 십케이데이터.length; i++) {
        const row = 십케이데이터[i];
        if (row[3] === '⚠️ 불일치') {
          const 번호 = row[0];
          const 제품명 = row[1];
          
          const 옵션정보 = [
            { name: '10K커플', 원본: row[4], 신규: row[5], 검증: row[6] },
            { name: '10K남자', 원본: row[7], 신규: row[8], 검증: row[9] },
            { name: '10K여자', 원본: row[10], 신규: row[11], 검증: row[12] }
          ];
          
          for (const 옵션 of 옵션정보) {
            if (옵션.검증.toString().startsWith('❌') && 옵션.원본 && 옵션.신규) {
              const 차이 = 옵션.신규 - 옵션.원본;
              const 할인가 = Math.round(옵션.신규 * 0.7);
              const 변경타입 = 차이 > 0 ? '📈 인상' : '📉 인하';
              
              const 가격차이표시 = 차이 > 0 
                ? `+${차이.toLocaleString()}원` 
                : `${차이.toLocaleString()}원`;
              
              변경내역.push([
                번호,
                제품명,
                옵션.name,
                옵션.원본.toLocaleString() + '원',
                옵션.신규.toLocaleString() + '원',
                가격차이표시,
                변경타입,
                할인가.toLocaleString() + '원',
                '10K'
              ]);
            }
          }
        }
      }
    }
    
    // 결과 출력
    if (변경내역.length > 0) {
      변경시트.getRange(2, 1, 변경내역.length, headers.length).setValues(변경내역);
      
      // 변경 타입별 색상 + 가격차이 열 강조
      for (let i = 0; i < 변경내역.length; i++) {
        const 변경타입 = 변경내역[i][6];
        const 제품타입 = 변경내역[i][8];
        const rowRange = 변경시트.getRange(i + 2, 1, 1, headers.length);
        
        if (변경타입 === '📈 인상') {
          rowRange.setBackground('#ffe6e6'); // 연한 빨강
        } else if (변경타입 === '📉 인하') {
          rowRange.setBackground('#e6f3ff'); // 연한 파랑
        }
        
        // 가격차이 열 굵게 표시
        변경시트.getRange(i + 2, 6).setFontWeight('bold').setFontSize(11);
        
        // 10K 제품은 금색 테두리
        if (제품타입 === '10K') {
          rowRange.setBorder(true, true, true, true, true, true, '#FFD700', SpreadsheetApp.BorderStyle.SOLID_MEDIUM);
        }
      }
      
      // 요약 정보
      let 총인상액 = 0;
      let 총인하액 = 0;
      let 인상건수 = 0;
      let 인하건수 = 0;
      
      for (const 변경 of 변경내역) {
        const 차이금액 = parseInt(변경[5].replace(/[^-\d]/g, ''));
        if (차이금액 > 0) {
          총인상액 += 차이금액;
          인상건수++;
        } else {
          총인하액 += Math.abs(차이금액);
          인하건수++;
        }
      }
      
      const 요약행 = 변경내역.length + 3;
      변경시트.getRange(요약행, 1).setValue('📊 변경 요약').setFontWeight('bold');
      변경시트.getRange(요약행 + 1, 1).setValue(`📈 인상: ${인상건수}건 (총 +${총인상액.toLocaleString()}원)`);
      변경시트.getRange(요약행 + 2, 1).setValue(`📉 인하: ${인하건수}건 (총 -${총인하액.toLocaleString()}원)`);
      변경시트.getRange(요약행 + 3, 1).setValue(`💰 순 변동: ${(총인상액 - 총인하액).toLocaleString()}원`);
      
      ui.alert(`✅ 가격 변경사항 찾기 완료!\n\n` +
              `총 ${변경내역.length}개 옵션 변경\n` +
              `📈 인상: ${인상건수}건 (+${총인상액.toLocaleString()}원)\n` +
              `📉 인하: ${인하건수}건 (-${총인하액.toLocaleString()}원)\n` +
              `💰 순 변동: ${(총인상액 - 총인하액).toLocaleString()}원`);
    } else {
      ui.alert('ℹ️ 10,000원을 초과하는 가격 변경사항이 없습니다.');
    }
    
  } catch (error) {
    ui.alert('❌ 오류 발생: ' + error.toString());
  }
}

// ========== 메이크샵 업로드 파일 생성 (수정: 범위에 해당하는 제품만) ==========
function createMakeshopUploadFile() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const ui = SpreadsheetApp.getUi();
  
  try {
    const 변경시트 = ss.getSheetByName(CONFIG.변경내역시트);
    
    if (!변경시트 || 변경시트.getLastRow() < 2) {
      ui.alert('❌ 변경사항이 없습니다. 먼저 가격 변경사항을 찾아주세요.');
      return;
    }
    
    // 업로드 시트 생성
    let 업로드시트 = ss.getSheetByName(CONFIG.메이크샵업로드시트);
    if (!업로드시트) {
      업로드시트 = ss.insertSheet(CONFIG.메이크샵업로드시트);
    } else {
      업로드시트.clear();
    }
    
    // 메이크샵 일괄등록 양식 헤더
    const headers = [
      '상품코드', '판매가격', '옵션타입', '옵션명', '옵션값', 
      '옵션추가금액', '옵션재고수량', '원가', '정가', '옵션정렬순서'
    ];
    
    업로드시트.getRange(1, 1, 1, headers.length).setValues([headers]);
    업로드시트.getRange(1, 1, 1, headers.length)
      .setFontWeight('bold')
      .setBackground('#28a745')
      .setFontColor('#ffffff');
    
    // 원본데이터에서 상품코드 매핑
    const 원본시트 = ss.getSheetByName(CONFIG.원본데이터시트);
    const 원본데이터 = 원본시트.getDataRange().getValues();
    const 상품코드맵 = new Map();
    const 상품옵션가격맵 = new Map();
    
    for (let i = 1; i < 원본데이터.length; i++) {
      const 상품코드 = 원본데이터[i][1]; // B열
      const 제품명 = 원본데이터[i][0]; // A열
      const 판매가격 = parseFloat(String(원본데이터[i][27] || '0').replace(/,/g, '')); // AB열
      const 옵션명문자열 = String(원본데이터[i][4] || ''); // E열
      const 옵션가격문자열 = String(원본데이터[i][5] || ''); // F열
      
      if (상품코드 && 제품명) {
        상품코드맵.set(제품명.trim(), 상품코드);
        
        // 원본 옵션 가격 파싱하여 저장
        const 원본옵션가격 = parseOriginalOptions(옵션명문자열, 옵션가격문자열, 판매가격);
        상품옵션가격맵.set(제품명.trim(), 원본옵션가격);
      }
    }
    
    // 10K 데이터에서도 상품코드 매핑
    const 십케이시트 = ss.getSheetByName(CONFIG.십케이데이터시트);
    if (십케이시트) {
      const 십케이데이터 = 십케이시트.getDataRange().getValues();
      for (let i = 1; i < 십케이데이터.length; i++) {
        const 십케이제품명 = 십케이데이터[i][0]; // A열
        const 옵션명문자열 = String(십케이데이터[i][44] || ''); // AS열
        const 가격차이문자열 = String(십케이데이터[i][45] || ''); // AT열
        const 판매가격 = parseFloat(String(십케이데이터[i][27] || '0').replace(/,/g, '')); // AB열
        
        if (십케이제품명) {
          // 10K 제품명에서 "10k" 제거한 이름으로 원본데이터에서 상품코드 찾기
          let 원본제품명 = 십케이제품명;
          if (십케이제품명.toLowerCase().startsWith('10k')) {
            원본제품명 = 십케이제품명.substring(3).trim();
          }
          
          // 원본데이터에서 상품코드 찾기
          for (let j = 1; j < 원본데이터.length; j++) {
            const 원본상품명 = String(원본데이터[j][0] || '').trim(); // A열
            const 원본상품코드 = String(원본데이터[j][1] || '').trim(); // B열
            
            if (원본상품명 === 원본제품명 && 원본상품코드) {
              상품코드맵.set(십케이제품명.trim(), 원본상품코드);
              
              // 10K 옵션 가격 파싱하여 저장
              const 십케이옵션가격 = parse10KOptions(옵션명문자열, 가격차이문자열, 판매가격);
              상품옵션가격맵.set(십케이제품명.trim(), 십케이옵션가격);
              break;
            }
          }
        }
      }
    }
    
    // 가격수정파일에서 신규 가격 가져오기
    const 가격시트 = ss.getSheetByName(CONFIG.가격수정시트);
    const 가격데이터 = 가격시트.getDataRange().getValues();
    const 신규가격맵 = parsePriceFile(가격데이터);
    
    // 10K 가격수정파일에서도 신규 가격 가져오기
    const 십케이가격시트 = ss.getSheetByName(CONFIG.십케이가격수정시트);
    if (십케이가격시트) {
      const 십케이가격데이터 = 십케이가격시트.getDataRange().getValues();
      const 십케이신규가격맵 = parse10KPriceFile(십케이가격데이터);
      
      // 10K 가격 정보를 신규가격맵에 병합
      for (const [제품명, 가격정보] of 십케이신규가격맵) {
        신규가격맵.set(제품명, 가격정보);
      }
    }
    
    // 변경 데이터 가져오기
    const 변경데이터 = 변경시트.getDataRange().getValues();
    
    // 제품별로 그룹화 (변경된 제품만 추출)
    const 변경제품목록 = new Set();
    
    for (let i = 1; i < 변경데이터.length; i++) {
      const row = 변경데이터[i];
      const 제품명 = row[1];
      변경제품목록.add(제품명);
    }
    
    const uploadData = [];
    const 옵션순서맵 = {
      '14K커플': 1,
      '14K남자': 2,
      '14K여자': 3,
      '18K커플': 4,
      '18K남자': 5,
      '18K여자': 6,
      '10K커플': 7,
      '10K남자': 8,
      '10K여자': 9
    };
    
    // 각 변경된 제품별로 모든 옵션을 포함하여 업로드 데이터 생성
    변경제품목록.forEach(제품명 => {
      const 상품코드 = 상품코드맵.get(제품명);
      
      if (!상품코드) {
        console.log(`상품코드를 찾을 수 없음: ${제품명}`);
        return;
      }
      
      // 신규 가격 정보 찾기 (유연한 매칭 적용)
      const 매칭결과 = findMatchingProduct(제품명, 신규가격맵);
      const 신규가격정보 = 매칭결과.가격정보;
      
      if (!신규가격정보) {
        console.log(`신규 가격 정보를 찾을 수 없음: ${제품명}`);
        return;
      }
      
      // 원본 가격 정보 가져오기
      const 원본가격정보 = 상품옵션가격맵.get(제품명);
      
      // 제품 타입 확인 (10K인지 14K/18K인지)
      const 제품타입 = 제품명.toLowerCase().includes('10k') ? '10K' : '14K/18K';
      
      // 기준가격 찾기
      let 기준가격;
      if (제품타입 === '10K') {
        기준가격 = 신규가격정보['10K커플'] || 0;
      } else {
        기준가격 = 신규가격정보['14K커플'] || 0;
      }
      
      // 기준가격이 없으면 원본에서 가져오기
      if (!기준가격 && 원본가격정보) {
        if (제품타입 === '10K') {
          기준가격 = 원본가격정보['10K커플'] || 0;
        } else {
          기준가격 = 원본가격정보['14K커플'] || 0;
        }
      }
      
      // 메인 상품 정보
      uploadData.push([
        상품코드,
        기준가격,
        'SELECT',
        '',
        '',
        '',
        '',
        Math.round(기준가격 * 0.3), // 원가
        Math.ceil((기준가격 / 0.7) / 1000) * 1000, // 정가
        ''
      ]);
      
      // 모든 옵션 정보 추가
      if (제품타입 === '10K') {
        // 10K 옵션들
        const 옵션목록 = ['10K커플', '10K남자', '10K여자'];
        
        옵션목록.forEach(옵션 => {
          // 신규 가격이 있으면 신규 가격 사용, 없으면 원본 가격 사용
          const 옵션가격 = 신규가격정보[옵션] || (원본가격정보 ? 원본가격정보[옵션] : 0) || 0;
          const 추가금액 = 옵션가격 - 기준가격;
          const 옵션표시명 = `${옵션.replace('커플', '커플링').replace('남자', '남자단품').replace('여자', '여자단품')}`;
          
          uploadData.push([
            상품코드,
            '',
            '',
            '상품선택',
            옵션표시명,
            추가금액,
            999,
            '',
            '',
            옵션순서맵[옵션] || 99
          ]);
        });
      } else {
        // 14K/18K 옵션들
        const 옵션목록 = ['14K커플', '14K남자', '14K여자', '18K커플', '18K남자', '18K여자'];
        
        옵션목록.forEach(옵션 => {
          // 신규 가격이 있으면 신규 가격 사용, 없으면 원본 가격 사용
          const 옵션가격 = 신규가격정보[옵션] || (원본가격정보 ? 원본가격정보[옵션] : 0) || 0;
          const 추가금액 = 옵션가격 - 기준가격;
          const 옵션표시명 = `${옵션.replace('커플', '커플링').replace('남자', '남자단품').replace('여자', '여자단품')}`;
          
          uploadData.push([
            상품코드,
            '',
            '',
            '상품선택',
            옵션표시명,
            추가금액,
            999,
            '',
            '',
            옵션순서맵[옵션] || 99
          ]);
        });
      }
    });
    
    // 데이터 출력
    if (uploadData.length > 0) {
      업로드시트.getRange(2, 1, uploadData.length, headers.length).setValues(uploadData);
      
      // 요약 정보
      const 요약행 = uploadData.length + 3;
      업로드시트.getRange(요약행, 1).setValue('📊 업로드 요약');
      업로드시트.getRange(요약행 + 1, 1).setValue(`총 ${변경제품목록.size}개 상품`);
      업로드시트.getRange(요약행 + 2, 1).setValue(`총 ${uploadData.length}개 행`);
      업로드시트.getRange(요약행 + 3, 1).setValue('⚠️ 각 상품의 모든 옵션이 포함되었습니다.');
      
      ui.alert(`✅ 메이크샵 업로드 파일 생성 완료!\n\n` +
              `${변경제품목록.size}개 상품이 준비되었습니다.\n\n` +
              `⚠️ 주의: 각 상품의 모든 옵션이 포함되었습니다.\n` +
              `변경되지 않은 옵션도 현재 가격으로 포함됩니다.`);
    } else {
      ui.alert('ℹ️ 업로드할 데이터가 없습니다.');
    }
    
  } catch (error) {
    console.error('오류:', error);
    ui.alert('❌ 오류 발생: ' + error.toString());
  }
}

// ========== 시트 정리 기능 ==========
function organizeSheets() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const ui = SpreadsheetApp.getUi();
  
  try {
    // 필수 시트 순서 정의
    const 필수시트순서 = [
      CONFIG.원본데이터시트,
      CONFIG.가격수정시트,
      CONFIG.십케이데이터시트,
      CONFIG.십케이가격수정시트,
      CONFIG.옵션검증시트,
      '10K검증결과',
      CONFIG.미매칭원본시트,
      CONFIG.변경내역시트,
      CONFIG.변동률검증시트,
      CONFIG.메이크샵업로드시트
    ];
    
    // 시트 순서 재정렬
    필수시트순서.forEach((sheetName, index) => {
      const sheet = ss.getSheetByName(sheetName);
      if (sheet) {
        ss.setActiveSheet(sheet);
        ss.moveActiveSheet(index + 1);
      }
    });
    
    ui.alert('✅ 시트 정리 완료!');
    
  } catch (error) {
    ui.alert('❌ 오류: ' + error.toString());
  }
}

// ========== 전체 리포트 생성 ==========
function generateFullReport() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const ui = SpreadsheetApp.getUi();
  
  const sheets = ss.getSheets();
  let report = '📊 메이크샵 가격 관리 시스템 리포트\n\n';
  
  // 시트별 요약
  report += '📋 시트 현황:\n';
  sheets.forEach(sheet => {
    const name = sheet.getName();
    const lastRow = sheet.getLastRow();
    const lastCol = sheet.getLastColumn();
    if (!sheet.isSheetHidden()) {
      report += `- ${name}: ${lastRow}행 × ${lastCol}열\n`;
    }
  });
  
  // 14K/18K 검증 결과 요약
  const 검증시트 = ss.getSheetByName(CONFIG.옵션검증시트);
  if (검증시트 && 검증시트.getLastRow() > 1) {
    const data = 검증시트.getDataRange().getValues();
    let 일치 = 0, 불일치 = 0, 미매칭 = 0;
    
    for (let i = 1; i < data.length; i++) {
      const 상태 = data[i][2];
      if (상태 === '✅ 일치') 일치++;
      else if (상태 === '⚠️ 불일치') 불일치++;
      else if (상태 === '❌ 미매칭') 미매칭++;
    }
    
    report += `\n📊 14K/18K 검증 결과:\n`;
    report += `- 일치: ${일치}개\n`;
    report += `- 불일치: ${불일치}개\n`;
    report += `- 미매칭: ${미매칭}개\n`;
  }
  
  // 10K 검증 결과 요약
  const 십케이검증시트 = ss.getSheetByName('10K검증결과');
  if (십케이검증시트 && 십케이검증시트.getLastRow() > 1) {
    const data = 십케이검증시트.getDataRange().getValues();
    let 일치 = 0, 불일치 = 0, 미매칭 = 0;
    
    for (let i = 1; i < data.length; i++) {
      const 상태 = data[i][3];
      if (상태 === '✅ 일치') 일치++;
      else if (상태 === '⚠️ 불일치') 불일치++;
      else if (상태 === '❌ 미매칭') 미매칭++;
    }
    
    report += `\n📊 10K 검증 결과:\n`;
    report += `- 일치: ${일치}개\n`;
    report += `- 불일치: ${불일치}개\n`;
    report += `- 미매칭: ${미매칭}개\n`;
  }
  
  // 변경사항 요약
  const 변경시트 = ss.getSheetByName(CONFIG.변경내역시트);
  if (변경시트 && 변경시트.getLastRow() > 1) {
    const 변경건수 = 변경시트.getLastRow() - 1;
    report += `\n📝 가격 변경사항:\n`;
    report += `- 총 ${변경건수}개 옵션 가격 변경 (10,000원 초과 차이)\n`;
  }
  
  report += `\n⚙️ 시스템 설정:\n`;
  report += `- 허용오차: 10,000원\n`;
  report += `- 할인율: 30% (고정)\n`;
  report += `- 10K 제품: 별도 처리\n`;
  report += `- 업로드: 변경된 상품의 모든 옵션 포함\n`;
  report += `- 범위 지정: A열 기준 번호로 특정 범위만 처리 가능\n`;
  
  ui.alert('시스템 리포트', report, ui.ButtonSet.OK);
}

// ========== 불필요한 시트 삭제 ==========
function cleanupSheets() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const ui = SpreadsheetApp.getUi();
  
  const response = ui.alert(
    '⚠️ 주의',
    '백업, 임시, 복사본 시트를 삭제하시겠습니까?',
    ui.ButtonSet.YES_NO
  );
  
  if (response === ui.Button.YES) {
    const sheets = ss.getSheets();
    let 삭제수 = 0;
    
    sheets.forEach(sheet => {
      const name = sheet.getName();
      if (name.includes('백업') || 
          name.includes('임시') ||
          name.includes('복사본') ||
          name.includes('Copy of')) {
        ss.deleteSheet(sheet);
        삭제수++;
      }
    });
    
    ui.alert(`✅ ${삭제수}개 시트가 삭제되었습니다.`);
  }
}

// ========== 테스트 데이터 생성 ==========
function createTestData() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const ui = SpreadsheetApp.getUi();
  
  const response = ui.alert(
    '🧪 테스트',
    '테스트를 위해 가격수정파일의 제품 가격을 변경하시겠습니까?\n\n' +
    '14K/18K:\n' +
    '- 1번 제품: 10% 인상\n' +
    '- 2번 제품: 10% 할인 적용\n\n' +
    '10K:\n' +
    '- 1번 제품: 5% 인상',
    ui.ButtonSet.YES_NO
  );
  
  if (response === ui.Button.YES) {
    // 14K/18K 테스트 데이터
    const 가격시트 = ss.getSheetByName(CONFIG.가격수정시트);
    
    if (가격시트) {
      // 1번 제품의 3행 수정 (10% 인상)
      for (let i = 1; i <= 3; i++) {
        // O열 (14K 쿠폰가)
        const cell14K = 가격시트.getRange(i + 1, 15); // O열
        const value14K = cell14K.getValue();
        if (value14K && typeof value14K === 'number') {
          cell14K.setValue(Math.round(value14K * 1.1));
          cell14K.setBackground('#ffff00');
        }
        
        // AC열 (18K 쿠폰가)
        const cell18K = 가격시트.getRange(i + 1, 29); // AC열
        const value18K = cell18K.getValue();
        if (value18K && typeof value18K === 'number') {
          cell18K.setValue(Math.round(value18K * 1.1));
          cell18K.setBackground('#ffff00');
        }
      }
      
      // 2번 제품의 3행 수정 (10% 할인으로 변경)
      if (가격시트.getLastRow() >= 7) {
        for (let i = 4; i <= 6; i++) {
          // M열의 정상가를 읽어서 90%로 O열에 설정
          const normal14K = 가격시트.getRange(i + 1, 13).getValue(); // M열
          if (normal14K && typeof normal14K === 'number') {
            const cell14K = 가격시트.getRange(i + 1, 15); // O열
            cell14K.setValue(Math.ceil((normal14K * 0.9) / 1000) * 1000); // 10% 할인, 천원단위 올림
            cell14K.setBackground('#87ceeb'); // 하늘색
          }
          
          // AA열의 정상가를 읽어서 90%로 AC열에 설정
          const normal18K = 가격시트.getRange(i + 1, 27).getValue(); // AA열
          if (normal18K && typeof normal18K === 'number') {
            const cell18K = 가격시트.getRange(i + 1, 29); // AC열
            cell18K.setValue(Math.ceil((normal18K * 0.9) / 1000) * 1000); // 10% 할인, 천원단위 올림
            cell18K.setBackground('#87ceeb'); // 하늘색
          }
        }
      }
    }
    
    // 10K 테스트 데이터
    const 십케이가격시트 = ss.getSheetByName(CONFIG.십케이가격수정시트);
    
    if (십케이가격시트) {
      // 1번 제품의 3행 수정 (5% 인상)
      for (let i = 1; i <= 3; i++) {
        // O열 (10K 쿠폰가)
        const cell10K = 십케이가격시트.getRange(i + 1, 15); // O열
        const value10K = cell10K.getValue();
        if (value10K && typeof value10K === 'number') {
          cell10K.setValue(Math.round(value10K * 1.05));
          cell10K.setBackground('#FFD700'); // 금색
        }
      }
    }
    
    ui.alert(`✅ 테스트 데이터 생성 완료\n\n` +
            `14K/18K:\n` +
            `- 1번 제품: 10% 인상 (노란색)\n` +
            `- 2번 제품: 10% 할인 적용 (하늘색)\n\n` +
            `10K:\n` +
            `- 1번 제품: 5% 인상 (금색)\n\n` +
            `이제 '범위 지정 가격 검증'을 실행해보세요.\n` +
            `예: 1-2 입력하여 1~2번 제품만 검증`);
  }
}
